cmake_minimum_required(VERSION 3.0 FATAL_ERROR)
project(arcface)

add_definitions(-D_GLIBCXX_USE_CXX11_ABI=0)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)


include_directories(/home/{user}/.local/lib/python3.6/site-packages/torch/include/torch/csrc/api/include)
include_directories(/home/{user}/.local/lib/python3.6/site-packages/torch/include)

link_directories(/home/{user}/.local/lib)
link_directories(/home/{user}/.local/lib/python3.6/site-packages/torch/lib)

set(CMAKE_PREFIX_PATH /home/{user}/.local/lib/python3.6/site-packages/torch)
set(Torch_DIR /home/{user}/.local/lib/python3.6/dist-packages/torch)

#OpenBlas
include_directories(/home/{user}/OpenBLAS/include)
link_directories(/home/{user}/OpenBLAS/lib)

#cuda
include_directories(/usr/local/cuda/include)
link_directories(/usr/local/cuda/lib64)

find_package(Torch REQUIRED)
find_package(OpenCV REQUIRED)

find_path(TENSORRT_INCLUDE_DIR NvInfer.h
  HINTS ${TENSORRT_ROOT} ${CUDA_TOOLKIT_ROOT_DIR} /usr/include
  PATH_SUFFIXES include)
find_path(TENSORRT_INCLUDE_DIR NvInferPlugin.h
  HINTS ${TENSORRT_ROOT} ${CUDA_TOOLKIT_ROOT_DIR}
  PATH_SUFFIXES include)
MESSAGE(STATUS "Found TensorRT headers at ${TENSORRT_INCLUDE_DIR}")
find_library(TENSORRT_LIBRARY_INFER nvinfer
  HINTS ${TENSORRT_ROOT} ${TENSORRT_BUILD} ${CUDA_TOOLKIT_ROOT_DIR}
  PATH_SUFFIXES lib lib64 lib/x64 lib/aarch64-linux-gnu)
find_library(TENSORRT_LIBRARY_INFER_PLUGIN nvinfer_plugin
  HINTS  ${TENSORRT_ROOT} ${TENSORRT_BUILD} ${CUDA_TOOLKIT_ROOT_DIR}
  PATH_SUFFIXES lib lib64 lib/x64 lib/aarch64-linux-gnu)
  find_library(TENSORRT_LIBRARY_PARSER nvparsers
  HINTS  ${TENSORRT_ROOT} ${TENSORRT_BUILD} ${CUDA_TOOLKIT_ROOT_DIR}
  PATH_SUFFIXES lib lib64 lib/x64 lib/aarch64-linux-gnu)
set(TENSORRT_LIBRARY ${TENSORRT_LIBRARY_INFER} ${TENSORRT_LIBRARY_INFER_PLUGIN} ${TENSORRT_LIBRARY_PARSER})
message(STATUS "Find TensorRT libs at ${TENSORRT_LIBRARY}")
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(
  TENSORRT DEFAULT_MSG TENSORRT_INCLUDE_DIR TENSORRT_LIBRARY)
if(NOT TENSORRT_FOUND)
  message(ERROR
    "Cannot find TensorRT library.")
endif()

find_package(Qt5 COMPONENTS Quick Core Widgets  REQUIRED)
qt5_add_resources(RESOURCES qml.qrc)
if(Qt5Widgets_FOUND)
	message("-- Found QT5: !")
endif()
link_libraries(stdc++fs)

#aux_source_directory(src DIR_SRCS)

add_executable(main 
			src/main.cpp 
			src/baseEngine.h
			src/baseEngine.cpp
			src/common.h
			src/common.cpp 
			src/mtcnn.h
			src/mtcnn.cpp
			src/network.h
			src/network.cpp
			src/pnet_rt.h
			src/pnet_rt.cpp
			src/rnet_rt.h
			src/rnet_rt.cpp
			src/onet_rt.h
			src/onet_rt.cpp
			src/pBox.h
			src/window.cpp
			src/window.h
			src/window.ui
			src/ui_window.h
			src/svm.h
			src/svm.cpp
			src/train_svm.h
			src/train_svm.cpp)

target_link_libraries( main ${TORCH_LIBRARIES})
target_link_libraries( main ${OpenCV_LIBS})
target_link_libraries( main openblas)
target_link_libraries( main cudart)
target_link_libraries( main ${TENSORRT_LIBRARY})
target_link_libraries( main ${TENSORRT_LIBRARY})
target_link_libraries( main Qt5::Core Qt5::Quick Qt5::Widgets)
target_link_libraries( main stdc++fs)

set_property(TARGET main PROPERTY CXX_STANDARD 14)
